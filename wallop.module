<?php
/**
 * Implements hook_theme().
 * Animations can be implemented by adding the animation name, and a
 * cooresponding CSS file.
 */
function wallop_theme() {
  return array(
    'wallop_slideshow' => array(
      'template' => 'templates/wallop-slideshow',
      'id' => NULL,
      'variables' => array(
        // An array of items - each of which will be a string or render array
        'slides' => array(),
        // Run through drupal_attributes().
        'attributes' => array(
          'class' => array(
            'Wallop',
            'Wallop--fade',
          ),
        ),
        // Settings coorespond directly to the Wallop library
        'settings' => array(
          'buttonNextClass' => 'Wallop-buttonNext',
          'buttonPreviousClass' => 'Wallop-buttonPrevious',
          'itemClass' => 'Wallop-item',
          'currentItemClass' => 'Wallop-item--current',
          'showPreviousClass' => 'Wallop-item--showPrevious',
          'showNextClass' => 'Wallop-item--showNext',
          'hidePreviousClass' => 'Wallop-item--hidePrevious',
          'hideNextClass' => 'Wallop-item--hideNext',
          'carousel' => TRUE,
        ),
        'show_controls' => TRUE,
        // Path to animation CSS files. These will not be inlined as they
        // are not "critical".
        'animation' => array(
          drupal_get_path('module', 'wallop') . '/css/wallop--fade.css',
        ),
      ),
    ),
  );
}

/**
 * Implements hook_preprocess_HOOK().
 * @param $variables
 */
function wallop_preprocess_wallop_slideshow(&$variables) {
  wallop_add_core_assets();

  $variables['id'] = drupal_html_id('wallop-slideshow');

  if(!empty($variables['animation'])) {
    foreach($variables['animation'] as $css_file) {
      drupal_add_css($css_file);
    }
  }
}

/**
 * Implement a static cache to determine if the script has been added.
 * This is necessary b/c we are going to inline the main library script.
 * By default, Drupal does no deduplication of inline script inclusion.
 */
function wallop_add_core_assets() {
  $added =& drupal_static(__FUNCTION__, FALSE);

  if($added) {
    return;
  }

  $assets = wallop_read_core_assets();

  drupal_alter('wallop_asset', $assets);

  drupal_add_js($assets['js']['asset'], $assets['js']['args']);
  drupal_add_css($assets['css']['asset'], $assets['css']['args']);

  $added = TRUE;
}

/**
 * Wallop is a very very small library. Our choice is to directly inline its assets.
 * @return string
 * @throws \Exception
 */
function wallop_read_core_assets() {
  $js_path = drupal_realpath(drupal_get_path('module', 'wallop') . '/js/wallop.min.js');
  $css_path = drupal_realpath(drupal_get_path('module', 'wallop') . '/css/wallop.css');

  if(!file_exists($js_path) || !file_exists($css_path)) {
    throw new Exception(t('The Wallop library is not present in the file system.'));
  }

  $return = array(
    'js' => array(
      'asset' => file_get_contents($js_path),
      'path' => $js_path,
      'args' => array(
        'inline' => TRUE,
      ),
    ),
    'css' => array(
      'asset' => file_get_contents($css_path),
      'path' => $css_path,
      'args' => array(
        'inline' => TRUE,
      ),
    ),
  );

  return $return;
}